import{a}from"./chunk.KLRPP4NQ.js";import{c as h}from"./chunk.HFPOGNHG.js";import{e as l}from"./chunk.I4CX4JT3.js";var d=Symbol(),c=i=>(e,t,n)=>{let o=n.value;n.value=function(...s){clearTimeout(this[d]),this[d]=window.setTimeout(()=>{o.apply(this,s)},i)}};var r=class{constructor(e){this.pointers=new Set;this.dragging=!1;this.scrolling=!1;this.mouseDragging=!1;this.host=e,e.addController(this),this.handleScroll=this.handleScroll.bind(this),this.handlePointerDown=this.handlePointerDown.bind(this),this.handlePointerMove=this.handlePointerMove.bind(this),this.handlePointerUp=this.handlePointerUp.bind(this),this.handlePointerUp=this.handlePointerUp.bind(this),this.handleTouchStart=this.handleTouchStart.bind(this),this.handleTouchEnd=this.handleTouchEnd.bind(this)}async hostConnected(){let e=this.host;await e.updateComplete;let t=e.scrollContainer;t.addEventListener("scroll",this.handleScroll,{passive:!0}),t.addEventListener("pointerdown",this.handlePointerDown),t.addEventListener("pointerup",this.handlePointerUp),t.addEventListener("pointercancel",this.handlePointerUp),t.addEventListener("touchstart",this.handleTouchStart,{passive:!0}),t.addEventListener("touchend",this.handleTouchEnd)}hostDisconnected(){let t=this.host.scrollContainer;t.removeEventListener("scroll",this.handleScroll),t.removeEventListener("pointerdown",this.handlePointerDown),t.removeEventListener("pointerup",this.handlePointerUp),t.removeEventListener("pointercancel",this.handlePointerUp),t.removeEventListener("touchstart",this.handleTouchStart),t.removeEventListener("touchend",this.handleTouchEnd)}handleScroll(){this.scrolling||(this.scrolling=!0,this.host.requestUpdate()),this.handleScrollEnd()}handleScrollEnd(){this.pointers.size?this.handleScrollEnd():(this.scrolling=!1,this.host.scrollContainer.dispatchEvent(new CustomEvent("scrollend",{bubbles:!1,cancelable:!1})),this.host.requestUpdate())}handlePointerDown(e){if(e.pointerType==="touch")return;let t=this.host.scrollContainer;this.pointers.add(e.pointerId),t.setPointerCapture(e.pointerId),this.mouseDragging&&this.pointers.size===1&&(e.preventDefault(),t.addEventListener("pointermove",this.handlePointerMove))}handlePointerMove(e){this.host.scrollContainer.hasPointerCapture(e.pointerId)&&(this.dragging||this.handleDragStart(),this.handleDrag(e))}handlePointerUp(e){let n=this.host.scrollContainer;this.pointers.delete(e.pointerId),n.releasePointerCapture(e.pointerId),this.pointers.size===0&&this.handleDragEnd()}handleTouchEnd(e){for(let t of e.changedTouches)this.pointers.delete(t.identifier)}handleTouchStart(e){for(let t of e.touches)this.pointers.add(t.identifier)}handleDragStart(){let e=this.host;this.dragging=!0,e.scrollContainer.style.setProperty("scroll-snap-type","unset"),e.requestUpdate()}handleDrag(e){this.host.scrollContainer.scrollBy({left:-e.movementX,top:-e.movementY})}async handleDragEnd(){let e=this.host,t=e.scrollContainer;t.removeEventListener("pointermove",this.handlePointerMove),this.dragging=!1;let n=t.scrollLeft,o=t.scrollTop;t.style.removeProperty("scroll-snap-type");let s=t.scrollLeft,p=t.scrollTop;t.style.setProperty("scroll-snap-type","unset"),t.scrollTo({left:n,top:o,behavior:"auto"}),t.scrollTo({left:s,top:p,behavior:h()?"auto":"smooth"}),this.scrolling&&await a(t,"scrollend"),t.style.removeProperty("scroll-snap-type"),e.requestUpdate()}};l([c(100)],r.prototype,"handleScrollEnd",1);export{r as a};
